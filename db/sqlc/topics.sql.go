// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: topics.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (title, content, user_id, category_id) VALUES ($1, $2, $3, $4) RETURNING topic_id, title, content, user_id, category_id, created_at
`

type CreateTopicParams struct {
	Title      string
	Content    sql.NullString
	UserID     sql.NullInt32
	CategoryID sql.NullInt32
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, createTopic,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.CategoryID,
	)
	var i Topic
	err := row.Scan(
		&i.TopicID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTopic = `-- name: DeleteTopic :exec
DELETE FROM topics WHERE topic_id = $1
`

func (q *Queries) DeleteTopic(ctx context.Context, topicID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopic, topicID)
	return err
}

const getTopics = `-- name: GetTopics :one
SELECT topic_id, title, content, user_id, category_id, created_at FROM topics WHERE topic_id = $1
`

func (q *Queries) GetTopics(ctx context.Context, topicID int32) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopics, topicID)
	var i Topic
	err := row.Scan(
		&i.TopicID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listTopics = `-- name: ListTopics :many
SELECT topic_id, title, content, user_id, category_id, created_at FROM topics
`

func (q *Queries) ListTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.QueryContext(ctx, listTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.TopicID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopic = `-- name: UpdateTopic :exec
UPDATE topics SET title = $2, content = $3 WHERE topic_id = $1
`

type UpdateTopicParams struct {
	TopicID int32
	Title   string
	Content sql.NullString
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) error {
	_, err := q.db.ExecContext(ctx, updateTopic, arg.TopicID, arg.Title, arg.Content)
	return err
}
