// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: categories.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCategorie = `-- name: CreateCategorie :one
INSERT INTO categories (name, description) VALUES ($1, $2) RETURNING category_id, name, description, created_at
`

type CreateCategorieParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateCategorie(ctx context.Context, arg CreateCategorieParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategorie, arg.Name, arg.Description)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategorie = `-- name: DeleteCategorie :exec
DELETE FROM categories WHERE category_id = $1
`

func (q *Queries) DeleteCategorie(ctx context.Context, categoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategorie, categoryID)
	return err
}

const getCategorie = `-- name: GetCategorie :one
SELECT category_id, name, description, created_at FROM categories WHERE category_id = $1
`

func (q *Queries) GetCategorie(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategorie, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, name, description, created_at FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategorie = `-- name: UpdateCategorie :exec
UPDATE categories SET name = $2, description = $3 WHERE category_id = $1
`

type UpdateCategorieParams struct {
	CategoryID  int32
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateCategorie(ctx context.Context, arg UpdateCategorieParams) error {
	_, err := q.db.ExecContext(ctx, updateCategorie, arg.CategoryID, arg.Name, arg.Description)
	return err
}
