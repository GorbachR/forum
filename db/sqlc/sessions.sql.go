// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_key, expires_at) VALUES ($1, $2, $3) RETURNING session_id, user_id, session_key, created_at, expires_at
`

type CreateSessionParams struct {
	UserID     sql.NullInt32
	SessionKey string
	ExpiresAt  time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.SessionKey, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.SessionKey,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteSession, userID)
	return err
}

const getSesssion = `-- name: GetSesssion :one
SELECT session_id, user_id, session_key, created_at, expires_at FROM sessions WHERE user_id = $1
`

func (q *Queries) GetSesssion(ctx context.Context, userID sql.NullInt32) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSesssion, userID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.SessionKey,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT session_id, user_id, session_key, created_at, expires_at FROM sessions
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.SessionKey,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions SET session_key = $2 WHERE user_id = $1
`

type UpdateSessionParams struct {
	UserID     sql.NullInt32
	SessionKey string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.UserID, arg.SessionKey)
	return err
}
