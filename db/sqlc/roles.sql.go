// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: roles.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description) VALUES ($1, $2) RETURNING role_id, name, description, created_at
`

type CreateRoleParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const getRoles = `-- name: GetRoles :one
SELECT role_id, name, description, created_at FROM roles WHERE role_id = $1
`

func (q *Queries) GetRoles(ctx context.Context, roleID int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoles, roleID)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, name, description, created_at FROM roles
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET name = $2, description = $3 WHERE role_id = $1
`

type UpdateRoleParams struct {
	RoleID      int32
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.RoleID, arg.Name, arg.Description)
	return err
}
